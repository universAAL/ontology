/*
	Copyright 2008-2014 Fraunhofer IGD, http://www.igd.fraunhofer.de
	Fraunhofer-Gesellschaft - Institute for Computer Graphics Research
	
	See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	  http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 */
package org.universAAL.ontology.asor;

import java.util.ArrayList;
import java.util.List;

import org.universAAL.middleware.owl.ManagedIndividual;

/**
 * Ontological representation of LanguageClassifier in the asor ontology.
 * Methods included in this class are the mandatory ones for representing an
 * ontological concept in Java classes for the universAAL platform. In addition
 * getters and setters for properties are included.
 * 
 * @author
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public class LanguageClassifier extends ManagedIndividual {
    public static final String MY_URI = AsorOntology.NAMESPACE
	    + "LanguageClassifier";
    public static final String PROP_SCRIPT_ENGINE = AsorOntology.NAMESPACE
	    + "scriptEngine";
    public static final String PROP_NAME = AsorOntology.NAMESPACE + "name";

    public static final LanguageClassifier javaScript;

    static {
	javaScript = new LanguageClassifier(AsorOntology.NAMESPACE
		+ "javaScript");
	javaScript.setName(new String[] { "JavaScript", "javascript" });
    }

    public LanguageClassifier() {
	super();
    }

    public LanguageClassifier(String uri) {
	super(uri);
    }

    public String getClassURI() {
	return MY_URI;
    }

    public int getPropSerializationType(String propURI) {
	if (PROP_SCRIPT_ENGINE.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_NAME.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	return PROP_SERIALIZATION_FULL;
    }

    public boolean isWellFormed() {
	return super.isWellFormed() && hasProperty(PROP_SCRIPT_ENGINE)
		&& hasProperty(PROP_NAME);
    }

    public String[] getName() {
	Object propList = getProperty(PROP_NAME);
	if (propList instanceof List)
	    return (String[]) ((List) propList).toArray(new String[0]);
	else if (propList != null)
	    return new String[] { (String) propList }; // Handle special case of
						       // a single item not
						       // contained in a list
	return new String[0];
    }

    public void addName(String newValue) {
	Object propList = getProperty(PROP_NAME);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_NAME, newList);
    }

    public void setName(String[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	props.put(PROP_NAME, propList);
    }

    public ScriptEngine[] getScriptEngine() {
	Object propList = getProperty(PROP_SCRIPT_ENGINE);
	if (propList instanceof List)
	    return (ScriptEngine[]) ((List) propList)
		    .toArray(new ScriptEngine[0]);
	else if (propList != null)
	    return new ScriptEngine[] { (ScriptEngine) propList }; // Handle
								   // special
								   // case of a
								   // single
								   // item not
								   // contained
								   // in a list
	return new ScriptEngine[0];
    }

    public void addScriptEngine(ScriptEngine newValue) {
	Object propList = getProperty(PROP_SCRIPT_ENGINE);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_SCRIPT_ENGINE, newList);
    }

    public void setScriptEngine(ScriptEngine[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	changeProperty(PROP_SCRIPT_ENGINE, propList);
    }

}
