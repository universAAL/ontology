/*
	Copyright 2008-2014 Fraunhofer IGD, http://www.igd.fraunhofer.de
	Fraunhofer-Gesellschaft - Institute for Computer Graphics Research
	
	See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	  http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 */
package org.universAAL.ontology.asor;

import org.universAAL.middleware.owl.DataRepOntology;
import org.universAAL.middleware.owl.ManagedIndividual;
import org.universAAL.middleware.owl.MergedRestriction;
import org.universAAL.middleware.owl.OntClassInfoSetup;
import org.universAAL.middleware.owl.Ontology;
import org.universAAL.middleware.rdf.TypeMapper;
import org.universAAL.middleware.service.owl.ServiceBusOntology;
import org.universAAL.middleware.service.owl.Service;
import org.universAAL.middleware.rdf.Resource;
import org.universAAL.ontology.AsorFactory;

/**
 * This class provides the main representation of the asor ontology for the
 * universAAL platform.
 * 
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public final class AsorOntology extends Ontology {

    private static AsorFactory factory = new AsorFactory();
    public static final String NAMESPACE = "http://ontology.universAAL.org/Asor#";

    public AsorOntology() {
	super(NAMESPACE);
    }

    public void create() {
	Resource r = getInfo();
	r.setResourceComment("");
	r.setResourceLabel("asor");
	addImport(DataRepOntology.NAMESPACE);
	addImport(ServiceBusOntology.NAMESPACE);

	// ******* Declaration of regular classes of the ontology ******* //
	OntClassInfoSetup oci_Script = createNewOntClassInfo(Script.MY_URI,
		factory, 0);
	OntClassInfoSetup oci_Asor = createNewOntClassInfo(Asor.MY_URI,
		factory, 1);
	OntClassInfoSetup oci_ScriptEngine = createNewOntClassInfo(
		ScriptEngine.MY_URI, factory, 2);
	OntClassInfoSetup oci_LanguageClassifier = createNewOntClassInfo(
		LanguageClassifier.MY_URI, factory, 3);

	// ******* Add content to regular classes of the ontology ******* //
	oci_Script.setResourceComment("");
	oci_Script.setResourceLabel("Script");
	oci_Script.addSuperClass(ManagedIndividual.MY_URI);
	oci_Script.addObjectProperty(Script.PROP_WRITTEN_IN).setFunctional();
	oci_Script.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(Script.PROP_WRITTEN_IN,
			LanguageClassifier.MY_URI, 1, 1));
	oci_Script.addDatatypeProperty(Script.PROP_CONTENT).setFunctional();
	oci_Script.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(Script.PROP_CONTENT,
			TypeMapper.getDatatypeURI(String.class), 1, 1));
	oci_Script.addDatatypeProperty(Script.PROP_IS_RUNNING).setFunctional();
	oci_Script.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(Script.PROP_IS_RUNNING,
			TypeMapper.getDatatypeURI(Boolean.class), 1, 1));
	oci_Script.addDatatypeProperty(Script.PROP_IS_PERSISTENT)
		.setFunctional();
	oci_Script.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			Script.PROP_IS_PERSISTENT,
			TypeMapper.getDatatypeURI(Boolean.class), 1, 1));
	oci_Script.addDatatypeProperty(Script.PROP_NAME).setFunctional();
	oci_Script.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(Script.PROP_NAME,
			TypeMapper.getDatatypeURI(String.class), 1, 1));

	oci_Asor.setResourceComment("");
	oci_Asor.setResourceLabel("Asor");
	oci_Asor.addSuperClass(Service.MY_URI);
	oci_Asor.addObjectProperty(Asor.PROP_SUPPORTS);
	oci_Asor.addRestriction(MergedRestriction.getAllValuesRestriction(
		Asor.PROP_SUPPORTS, ScriptEngine.MY_URI));
	oci_Asor.addObjectProperty(Asor.PROP_CONTROLS);
	oci_Asor.addRestriction(MergedRestriction.getAllValuesRestriction(
		Asor.PROP_CONTROLS, Script.MY_URI));

	oci_ScriptEngine.setResourceComment("");
	oci_ScriptEngine.setResourceLabel("ScriptEngine");
	oci_ScriptEngine.addSuperClass(ManagedIndividual.MY_URI);
	oci_ScriptEngine.addDatatypeProperty(ScriptEngine.PROP_VERSION)
		.setFunctional();
	oci_ScriptEngine.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			ScriptEngine.PROP_VERSION,
			TypeMapper.getDatatypeURI(String.class), 0, 1));
	oci_ScriptEngine.addDatatypeProperty(ScriptEngine.PROP_NAME)
		.setFunctional();
	oci_ScriptEngine.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(ScriptEngine.PROP_NAME,
			TypeMapper.getDatatypeURI(String.class), 0, 1));
	oci_ScriptEngine.addDatatypeProperty(ScriptEngine.PROP_MIME_TYPES);
	oci_ScriptEngine.addRestriction(MergedRestriction
		.getAllValuesRestriction(ScriptEngine.PROP_MIME_TYPES,
			TypeMapper.getDatatypeURI(String.class)));
	oci_ScriptEngine
		.addObjectProperty(ScriptEngine.PROP_LANGUAGE_CLASSIFIER);
	oci_ScriptEngine.addRestriction(MergedRestriction
		.getAllValuesRestriction(ScriptEngine.PROP_LANGUAGE_CLASSIFIER,
			LanguageClassifier.MY_URI));
	oci_ScriptEngine.addDatatypeProperty(ScriptEngine.PROP_FILE_EXTENSIONS);
	oci_ScriptEngine.addRestriction(MergedRestriction
		.getAllValuesRestriction(ScriptEngine.PROP_FILE_EXTENSIONS,
			TypeMapper.getDatatypeURI(String.class)));
	oci_ScriptEngine
		.addDatatypeProperty(ScriptEngine.PROP_LANGUAGE_VERSION)
		.setFunctional();
	oci_ScriptEngine.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			ScriptEngine.PROP_LANGUAGE_VERSION,
			TypeMapper.getDatatypeURI(String.class), 0, 1));

	oci_LanguageClassifier.setResourceComment("");
	oci_LanguageClassifier.setResourceLabel("LanguageClassifier");
	oci_LanguageClassifier.addSuperClass(ManagedIndividual.MY_URI);
	oci_LanguageClassifier.addObjectProperty(
		LanguageClassifier.PROP_SCRIPT_ENGINE).setFunctional();
	oci_LanguageClassifier.addRestriction(MergedRestriction
		.getAllValuesRestriction(LanguageClassifier.PROP_SCRIPT_ENGINE,
			ScriptEngine.MY_URI));
	oci_LanguageClassifier
		.addDatatypeProperty(LanguageClassifier.PROP_NAME);
	oci_LanguageClassifier.addRestriction(MergedRestriction
		.getAllValuesRestrictionWithCardinality(
			LanguageClassifier.PROP_NAME,
			TypeMapper.getDatatypeURI(String.class), 1, -1));
	oci_LanguageClassifier.addInstance(LanguageClassifier.javaScript);
    }
}
