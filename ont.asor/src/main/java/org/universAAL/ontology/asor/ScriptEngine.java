/*
	Copyright 2008-2014 Fraunhofer IGD, http://www.igd.fraunhofer.de
	Fraunhofer-Gesellschaft - Institute for Computer Graphics Research
	
	See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	  http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 */
package org.universAAL.ontology.asor;

import java.util.ArrayList;
import java.util.List;

import org.universAAL.middleware.owl.ManagedIndividual;

/**
 * Ontological representation of ScriptEngine in the asor ontology. Methods
 * included in this class are the mandatory ones for representing an ontological
 * concept in Java classes for the universAAL platform. In addition getters and
 * setters for properties are included.
 * 
 * @author
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public class ScriptEngine extends ManagedIndividual {
    public static final String MY_URI = AsorOntology.NAMESPACE + "ScriptEngine";
    public static final String PROP_VERSION = AsorOntology.NAMESPACE
	    + "version";
    public static final String PROP_NAME = AsorOntology.NAMESPACE + "name";
    public static final String PROP_MIME_TYPES = AsorOntology.NAMESPACE
	    + "mimeTypes";
    public static final String PROP_LANGUAGE_CLASSIFIER = AsorOntology.NAMESPACE
	    + "languageClassifier";
    public static final String PROP_FILE_EXTENSIONS = AsorOntology.NAMESPACE
	    + "fileExtensions";
    public static final String PROP_LANGUAGE_VERSION = AsorOntology.NAMESPACE
	    + "languageVersion";

    public ScriptEngine() {
	super();
    }

    public ScriptEngine(String uri) {
	super(uri);
    }

    public String getClassURI() {
	return MY_URI;
    }

    public int getPropSerializationType(String propURI) {
	if (PROP_VERSION.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_NAME.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_MIME_TYPES.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_LANGUAGE_CLASSIFIER.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_FILE_EXTENSIONS.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_LANGUAGE_VERSION.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	return PROP_SERIALIZATION_FULL;
    }

    public boolean isWellFormed() {
	return super.isWellFormed() && hasProperty(PROP_VERSION)
		&& hasProperty(PROP_NAME) && hasProperty(PROP_MIME_TYPES)
		&& hasProperty(PROP_LANGUAGE_CLASSIFIER)
		&& hasProperty(PROP_FILE_EXTENSIONS)
		&& hasProperty(PROP_LANGUAGE_VERSION);
    }

    public String getName() {
	return (String) getProperty(PROP_NAME);
    }

    public void setName(String newPropValue) {
	if (newPropValue != null)
	    changeProperty(PROP_NAME, newPropValue);
    }

    public String getVersion() {
	return (String) getProperty(PROP_VERSION);
    }

    public void setVersion(String newPropValue) {
	if (newPropValue != null)
	    changeProperty(PROP_VERSION, newPropValue);
    }

    public String getLanguageVersion() {
	return (String) getProperty(PROP_LANGUAGE_VERSION);
    }

    public void setLanguageVersion(String newPropValue) {
	if (newPropValue != null)
	    changeProperty(PROP_LANGUAGE_VERSION, newPropValue);
    }

    public String[] getMimeTypes() {
	Object propList = getProperty(PROP_MIME_TYPES);
	if (propList instanceof List)
	    return (String[]) ((List) propList).toArray(new String[0]);
	else if (propList != null)
	    return new String[] { (String) propList }; // Handle special case of
						       // a single item not
						       // contained in a list
	return new String[0];
    }

    public void addMimeTypes(String newValue) {
	Object propList = getProperty(PROP_MIME_TYPES);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_MIME_TYPES, newList);
    }

    public void setMimeTypes(String[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	changeProperty(PROP_MIME_TYPES, propList);
    }

    public String[] getFileExtensions() {
	Object propList = getProperty(PROP_FILE_EXTENSIONS);
	if (propList instanceof List)
	    return (String[]) ((List) propList).toArray(new String[0]);
	else if (propList != null)
	    return new String[] { (String) propList }; // Handle special case of
						       // a single item not
						       // contained in a list
	return new String[0];
    }

    public void addFileExtensions(String newValue) {
	Object propList = getProperty(PROP_FILE_EXTENSIONS);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_FILE_EXTENSIONS, newList);
    }

    public void setFileExtensions(String[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	changeProperty(PROP_FILE_EXTENSIONS, propList);
    }

    public LanguageClassifier[] getLanguageClassifier() {
	Object propList = getProperty(PROP_LANGUAGE_CLASSIFIER);
	if (propList instanceof List)
	    return (LanguageClassifier[]) ((List) propList)
		    .toArray(new LanguageClassifier[0]);
	else if (propList != null)
	    return new LanguageClassifier[] { (LanguageClassifier) propList }; // Handle
									       // special
									       // case
									       // of
									       // a
									       // single
									       // item
									       // not
									       // contained
									       // in
									       // a
									       // list
	return new LanguageClassifier[0];
    }

    public void addLanguageClassifier(LanguageClassifier newValue) {
	Object propList = getProperty(PROP_LANGUAGE_CLASSIFIER);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_LANGUAGE_CLASSIFIER, newList);
    }

    public void setLanguageClassifier(LanguageClassifier[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	changeProperty(PROP_LANGUAGE_CLASSIFIER, propList);
    }

}
