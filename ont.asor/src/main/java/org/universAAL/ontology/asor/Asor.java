/*
	Copyright 2008-2014 Fraunhofer IGD, http://www.igd.fraunhofer.de
	Fraunhofer-Gesellschaft - Institute for Computer Graphics Research
	
	See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	  http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
 */
package org.universAAL.ontology.asor;

import java.util.ArrayList;
import java.util.List;

import org.universAAL.middleware.service.owl.Service;

/**
 * Ontological representation of Asor in the asor ontology. Methods included in
 * this class are the mandatory ones for representing an ontological concept in
 * Java classes for the universAAL platform. In addition getters and setters for
 * properties are included.
 * 
 * @author
 * @author Generated by the OntologyUML2Java transformation of AAL Studio
 */
public class Asor extends Service {
    public static final String MY_URI = AsorOntology.NAMESPACE + "Asor";
    public static final String PROP_SUPPORTS = AsorOntology.NAMESPACE
	    + "supports";
    public static final String PROP_CONTROLS = AsorOntology.NAMESPACE
	    + "controls";

    public Asor() {
	super();
    }

    public Asor(String uri) {
	super(uri);
    }

    public String getClassURI() {
	return MY_URI;
    }

    public int getPropSerializationType(String propURI) {
	if (PROP_SUPPORTS.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	if (PROP_CONTROLS.equals(propURI))
	    return PROP_SERIALIZATION_FULL;
	return super.getPropSerializationType(propURI);
    }

    public boolean isWellFormed() {
	return super.isWellFormed() && hasProperty(PROP_SUPPORTS)
		&& hasProperty(PROP_CONTROLS);
    }

    public ScriptEngine[] getSupports() {
	Object propList = getProperty(PROP_SUPPORTS);
	if (propList instanceof List)
	    return (ScriptEngine[]) ((List) propList)
		    .toArray(new ScriptEngine[0]);
	else if (propList != null)
	    return new ScriptEngine[] { (ScriptEngine) propList }; // Handle
								   // special
								   // case of a
								   // single
								   // item not
								   // contained
								   // in a list
	return new ScriptEngine[0];
    }

    public void addSupports(ScriptEngine newValue) {
	Object propList = getProperty(PROP_SUPPORTS);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_SUPPORTS, newList);
    }

    public void setSupports(ScriptEngine[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	changeProperty(PROP_SUPPORTS, propList);
    }

    public Script[] getControls() {
	Object propList = getProperty(PROP_CONTROLS);
	if (propList instanceof List)
	    return (Script[]) ((List) propList).toArray(new Script[0]);
	else if (propList != null)
	    return new Script[] { (Script) propList }; // Handle special case of
						       // a single item not
						       // contained in a list
	return new Script[0];
    }

    public void addControls(Script newValue) {
	Object propList = getProperty(PROP_CONTROLS);
	List newList;
	if (propList instanceof List)
	    newList = (List) propList;
	else {
	    newList = new ArrayList();
	    if (propList != null)
		newList.add(propList); // Handle special case of a single
				       // previous item not contained in a list
	}
	newList.add(newValue);
	changeProperty(PROP_CONTROLS, newList);
    }

    public void setControls(Script[] propertyValue) {
	List propList = new ArrayList(propertyValue.length);
	for (int i = 0; i < propertyValue.length; i++) {
	    propList.add(propertyValue[i]);
	}
	changeProperty(PROP_CONTROLS, propList);
    }

}
